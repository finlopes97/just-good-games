---
import BlogPostCard from "../components/BlogPostCard.astro";
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { formatDate } from "../utils/dateFormatter";

const allPosts = await getCollection("posts");
const featuredPosts = allPosts.filter((post) => post.data.featured);
const title = "Featured Games";

// Function to group posts by year and month
function groupPosts(posts) {
  return posts.reduce((groups, post) => {
    const date = new Date(post.data.pubDate);
    const year = date.getFullYear();
    const month = date.toLocaleString("default", { month: "long" });

    if (!groups[year]) {
      groups[year] = {};
    }

    if (!groups[year][month]) {
      groups[year][month] = [];
    }

    groups[year][month].push(post);

    return groups;
  }, {});
}

const groupedPosts = groupPosts(featuredPosts);
---

<Layout title={title}>
  <div>
    <h1 class="text-2xl text-center md:text-5xl font-heading">
      Featured Articles.
    </h1>
    <div>
      {
        Object.keys(groupedPosts)
          .sort((a, b) => b - a) // Sort years in descending order
          .map((year) => (
            <div key={year}>
              <h2 class="text-xl font-subheading mb-4">{year}</h2>
              {Object.keys(groupedPosts[year])
                .sort((a, b) => {
                  // Parse month names into numbers for sorting
                  const monthOrder = [
                    "January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"
                  ];
                  return monthOrder.indexOf(b) - monthOrder.indexOf(a);
                })
                .map((month) => (
                  <div class="md:pl-4 mb-2" key={month}>
                    <h3 class="text-lg font-subheading bg-accent-400 rotate-1 max-w-fit p-1 m-4">{month}</h3>
                    <ul class="flex flex-col md:pl-6 md:flex-row md:flex-wrap w-full justify-start gap-8">
                      {groupedPosts[year][month]
                        .sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate))
                        .map((post) => (
                          <li class="list-none" key={post.slug}>
                            <BlogPostCard
                              url={`/posts/${post.slug}/`}
                              title={post.data.title}
                              pubDate={formatDate(post.data.pubDate)}
                              description={post.data.description}
                              image={post.data.image}
                              tags={post.data.tags}
                            />
                          </li>
                        ))}
                    </ul>
                  </div>
                ))}
            </div>
          ))
      }
    </div>
  </div>
</Layout>
