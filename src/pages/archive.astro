---
import BlogPostListing from "../components/BlogPostListing.astro";
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { formatDate } from "../utils/dateFormatter";
import { paginate } from "../utils/paginate"; // Utility function for pagination

const allPosts = await getCollection("posts");
const title = "Archive";

// Function to group posts by year and month
function groupPosts(posts) {
  return posts.reduce((groups, post) => {
    const date = new Date(post.data.pubDate);
    const year = date.getFullYear();
    const month = date.toLocaleString("default", { month: "long" });

    if (!groups[year]) {
      groups[year] = {};
    }

    if (!groups[year][month]) {
      groups[year][month] = [];
    }

    groups[year][month].push(post);

    return groups;
  }, {});
}

const groupedPosts = groupPosts(allPosts);

// Pagination settings
const postsPerPage = 10;
const totalPosts = allPosts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);

// Get the current page from the query parameter
const currentPage = parseInt(
  new URLSearchParams(Astro.request.url).get("page") || "1",
  10
);
const paginatedPosts = paginate(allPosts, currentPage, postsPerPage);
---

<Layout title={title}>
  <div>
    <h1 class="text-2xl text-center md:text-5xl font-heading">Archive.</h1>
    <div>
      {
        Object.keys(groupedPosts)
          .sort((a, b) => b - a)
          .map((year) => (
            <div class="ml-8">
              <h2 class="text-xl font-subheading mb-4">{year}</h2>
              {Object.keys(groupedPosts[year]).map((month) => (
                <div class="mb-2">
                  <h3 class="text-lg font-subheading bg-accent-400 rotate-1 max-w-fit p-1 m-4">
                    {month}
                  </h3>
                  <ul class="flex flex-col ml-8 mr-12 gap-6">
                    {paginatedPosts.map((post) => (
                      <BlogPostListing
                        url={`/posts/${post.slug}/`}
                        title={post.data.title}
                        pubDate={formatDate(post.data.pubDate)}
                      />
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          ))
      }
    </div>

    <div class="pagination mt-4">
      {
        currentPage > 1 && (
          <a href={`?page=${currentPage - 1}`} class="pagination-prev">
            Previous
          </a>
        )
      }
      {
        currentPage < totalPages && (
          <a href={`?page=${currentPage + 1}`} class="pagination-next">
            Next
          </a>
        )
      }
    </div>
  </div>
</Layout>
